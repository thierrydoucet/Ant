<?xml version="1.0" encoding="UTF-8"?>

<!--
 ===============================================================================
 This Ant file describe the build process for WebSphereCommerceServerExtensions.
 ===============================================================================
-->

<project name="Simple build" default="build">

    <description>Simple build script with maven task</description>

	<!-- Define default value for optionnal properties -->
	<property name="source.encoding" value="UTF-8" />
	<property name="working.dir" value="${basedir}/target" />
	<property name="source.src.dir" value="${basedir}/src" />
	<property name="source.bin.dir" value="${working.dir}/classes" />
	<property name="source.instrumented.bin.dir" value="${working.dir}/cobertura-classes" />
	<property name="test.src.dir" value="${basedir}/test" />
	<property name="test.bin.dir" value="${working.dir}/test-classes" />
	<property name="test.failOnError" value="true" />
	<property name="test.report.dir" value="${working.dir}/test-reports" />
	<property name="test.coverage.report.dir" value="${working.dir}/cobertura" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="test.lib.dir" value="${basedir}/test-lib" />

	<!-- these properties are private and mandatory for JUnit Sonar Report -->
	<property name="sonar.dynamicAnalysis" value="reuseReports" />
	<property name="sonar.core.codeCoveragePlugin" value="cobertura" />
	<property name="sonar.surefire.reportsPath" value="${working.dir}/${test.report.folder}" />
	<property name="sonar.cobertura.reportPath" value="${working.dir}/${test.coverage.report.folder}/coverage.xml" />


	<!-- Define classpath used to compile Java code -->
	<path id="compile.class.path">
		<fileset dir="${lib.dir}" includes="**/*.jar" erroronmissingdir="true" />
	</path>

	<!-- Define classpath used to compile and run test Java code -->
	<path id="test.class.path">
        <path refid="compile.class.path" />
        <pathelement path="${source.bin.dir}" />		
		<fileset dir="${test.lib.dir}" includes="**/*.jar" erroronmissingdir="true" />		
	</path>

    <!-- Validate the project is correct and all necessary information is available -->
    <fail unless="app.name" message="Application name (app.name) has not been set." />
    <fail unless="app.version" message="Application version (app.version) has not been set." />
	<fail unless="sonar-ant-task.jar" message="Sonar Ant Task Jar (sonar-ant-task.jar) has not been set." />
	<fail unless="cobertura.dir" message="Cobertura installation directory (cobertura.dir) has not been set." />

	<condition property="sonar-ant-task.jar.exists">
		<available file="${sonar-ant-task.jar}" type="file" />
	</condition>
	<fail unless="${sonar-ant-task.jar.exists}" message="Sonar Ant Task Jar '${sonar-ant-task.jar}' does not exists." />
	<condition property="cobertura.dir.exists">
		<available file="${cobertura.dir}" type="dir" />
	</condition>
	<fail unless="${cobertura.dir.exists}" message="Cobertura installation directory '${cobertura.dir}' does not exists." />

	<!-- Define Sonar tasks -->
	<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
		<classpath path="${sonar-ant-task.jar}" />
	</taskdef>

    <echo>
    Application: ${app.name} ${app.version}
    Build File : ${ant.file} 
    Run by     : ${user.name}
    Base Dir   : ${basedir}
    Build Dir  : ${build}
    Java Home  : ${java.home}
    </echo>

	<!--
		Build targets
	-->

	<target name="clean" description="Remove all files generated by the previous build.">
		<delete dir="${working.dir}" quiet="true" />
	</target>

	<target name="compile" description="compile the source code of the project">
		<echo level="info" message="Compiling project ${app.name}..." />

		<mkdir dir="${source.bin.dir}" />

		<javac srcdir="${source.src.dir}" destdir="${source.bin.dir}" debug="true" encoding="${source.encoding}" includeantruntime="false">
			<classpath refid="compile.class.path" />
			<compilerarg value="-Xlint" />
		</javac>
	</target>

	<target name="test-compile" description="Compile the test source code into the test destination directory." depends="compile">
		<echo level="info" message="Compiling test classes for project ${app.name}..." />

		<mkdir dir="${test.bin.dir}" />

		<javac srcdir="${test.src.dir}" destdir="${test.bin.dir}" debug="true" encoding="${source.encoding}" includeantruntime="false">
			<classpath>
				<path refid="test.class.path" />
			</classpath>
			<compilerarg value="-Xlint:-path" />
		</javac>
	</target>

	<target name="test" description="Test the compiled source code using JUnit framework. These tests should not require the code be packaged or deployed." depends="test-compile">
		<echo level="info" message="Testing project ${app.name}..." />

		<mkdir dir="${source.instrumented.bin.dir}" />
		<mkdir dir="${test.report.dir}" />
		<mkdir dir="${test.coverage.report.dir}" />

		<!-- instrument bytecode (for test coverage) -->
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura.jar" />
				<include name="lib/**/*.jar" />
			</fileset>
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		<cobertura-instrument todir="${source.instrumented.bin.dir}" datafile="${test.coverage.report.dir}/cobertura.ser">
			<fileset dir="${source.bin.dir}" />
		</cobertura-instrument>

		<!-- run unit test -->
		<junit printsummary="on" fork="true" haltonfailure="${test.failOnError}">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${test.coverage.report.dir}/cobertura.ser" />
			<classpath>
				<pathelement path="${source.instrumented.bin.dir}" />
				<path refid="test.class.path" />
				<pathelement path="${test.bin.dir}" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- generate report -->
		<cobertura-report format="xml" datafile="${test.coverage.report.dir}/cobertura.ser" destdir="${test.coverage.report.dir}" />
	</target>

	<target name="package" description="Take the compiled code and package it in its distributable format, such as a JAR." depends="test">
		<echo level="info" message="Packaging project ${app.name}..." />

        <property name='distrib-name' value='${app.name}-${app.version}'/>

        <jar destfile="${working.dir}/${distrib-name}.jar" basedir="${source.bin.dir}">
            <manifest>
                <attribute name='Specification-Version' value='${app.version}'/> 
                <attribute name='Specification-Title' value='${app.name}' />
                <attribute name='Implementation-Version' value='${app.version}'/> 
                <attribute name='Implementation-Title' value='${app.name}' />
            </manifest>
        </jar>
	</target>

    <!-- 
        Quality target
     -->

	<path id="sonar.libraries">
		<path refid="compile.class.path" />
	</path>

	<target name="sonar" description="Run Sonar analysis." depends="test">
		<echo level="info" message="Analysing with Sonar project ${app.name}..." />

		<property name="sonar.projectName" value="${app.name}" />
		<property name="sonar.sources" value="${source.src.dir}" />
		<property name="sonar.tests" value="${test.src.dir}" />
		<property name="sonar.binaries" value="${source.bin.dir},${test.bin.dir}" />

		<sonar:sonar key="${app.name}" version="${app.version}" xmlns:sonar="antlib:org.sonar.ant" />
	</target>

	<target name="build" description="Performs the all build tasks." depends="clean, compile, test, package, sonar">
		<echo level="info" message="Build SUCCESS." />
    </target>

</project>
